{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}


## Requirements
- [Kubernetes(K8s) v1.25.2](https://kubernetes.io/docs/setup/)
   - if ingress is needed then
     1. set `.Values.ingress.enabled` to `true`
     2. install an Ingress controller from [Ingress Controllers](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/) list
        - If you pick `ingress-nginx` controller, you need to
  create a file named `values-nginx-controller.yaml` with the following content:
          ```yaml
            # configure the tcp configmap
            tcp:
              7778: localhost:7778

            # enable the service and expose the tcp ports.
            # be careful as this will potentially make them
            # available on the public web
            controller:
              service:
                enabled: true
                ports:
                  http: 7890
                  https: 7891
                targetPorts:
                  http: http
                  https: https
          ```
          And run the following commands:
          ```bash
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx --create-namespace --namespace=ingress-nginx -f ./values-nginx-controller.yaml
          ```
- [Helm](https://helm.sh/docs/intro/install/) v3.10.1
- K8s [Local Path Provisioner](https://github.com/rancher/local-path-provisioner)(v0.0.23) (if `.Values.persistence.enabled` is `true`(**default**))
  ```bash
  kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.23/deploy/local-path-storage.yaml
  ```

## Installation

### Deployment
To deploy nem-client helm chart to local K8s environment for mainnet:
```bash
helm install mainnet ./charts/nem-client --create-namespace --namespace=mainnet --set config.user.nem.network=mainnet --set config.user.nis.bootKey=PrivateKey --set config.user.nis.bootName=MyNodeName
```
To list the Helm packages:
```bash
helm ls --namespace=mainnet
```

To check the K8s resources:
```bash
kubectl get all --namespace=mainnet
```

To uninstall the Helm package:
```bash
helm uninstall mainnet --namespace=mainnet
```

### Testnet Deployment
To deploy nem-client helm chart to local K8s environment for testnet:
```bash
helm install testnet ./charts/nem-client --create-namespace --namespace=testnet --set config.user.nem.network=testnet --set config.user.nis.bootKey=PrivateKey --set config.user.nis.bootName=MyNodeName
```
Please do not forget to add `--namespace=testnet` to all of the subsequent commands.

### Custom Testnet Deployment with Generated Nemesis File
Use [nemesis-generator](https://github.com/NemProject/nemesis-generator) to generate a custom nemesis file for the initial block.

For testnet deployment with custom nemesis binary:
1. Encode nemesis binary file with Base64 to a (nemesis-base64.)txt file
```bash
base64 -i nemesis.bin -o PATH_TO_FILE/nemesis-base64.txt
```
2. Install helm chart by providing custom nemesis binary file as a value(--set-file):

```bash
helm install testnet ./charts/nem-client --create-namespace --namespace=testnet --set-file config.customNemesisFileBase64= PATH_TO_FILE/nemesis-base64.txt --set config.user.nem.network=testnet --set config.user.nis.bootKey=PrivateKey --set config.user.nis.bootName=MyNodeName
```

{{ template "chart.valuesSection" . }}
